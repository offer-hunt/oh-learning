plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'checkstyle'
}

import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat


group = 'ru.offer.hunt'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'com.nimbusds:nimbus-jose-jwt:9.37.3'

    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.flywaydb:flyway-database-postgresql:11.10.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.wiremock:wiremock-jetty12:3.9.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
    testImplementation 'org.testcontainers:postgresql:1.20.4'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.12.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.12.2'
}

spotless {
    java {
        googleJavaFormat('1.17.0')
        removeUnusedImports()
        endWithNewline()
        target 'src/**/*.java'
    }
}

checkstyle {
    toolVersion = '10.18.2'
}

tasks.withType(Checkstyle).configureEach {
    configDirectory.set(layout.projectDirectory.dir("config/checkstyle"))

    config = resources.text.fromFile(layout.projectDirectory.file("config/checkstyle/checkstyle.xml"))

    reports {
        xml.required = false
        html.required = true
        html.outputLocation.set(layout.buildDirectory.file("reports/checkstyle/${name}.html"))
    }

    ignoreFailures = false
    maxWarnings = 0
}


tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events = [ TestLogEvent.PASSED,  TestLogEvent.FAILED,  TestLogEvent.SKIPPED] as Set
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.named('check') {
    dependsOn 'spotlessCheck', 'checkstyleMain', 'checkstyleTest'
}

bootJar {
    archiveFileName = 'oh-learning-0.0.1-SNAPSHOT.jar'
}
